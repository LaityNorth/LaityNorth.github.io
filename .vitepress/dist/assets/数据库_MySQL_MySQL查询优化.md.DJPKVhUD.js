import{_ as s,c as i,o as t,a1 as l}from"./chunks/framework.DFHaK-wS.js";const p="/assets/Snipaste_2024-06-30_17-11-50.DAGl7ql5.png",e="/assets/Snipaste_2024-06-30_17-12-12.XJzQaqvZ.png",a="/assets/Snipaste_2024-06-30_17-12-53.CRXsiO4m.png",n="/assets/Snipaste_2024-06-30_17-13-11.CePZMeTc.png",r="/assets/Snipaste_2024-06-30_17-13-36.Ce5IRvQB.png",_=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"数据库/MySQL/MySQL查询优化.md","filePath":"数据库/MySQL/MySQL查询优化.md"}'),d={name:"数据库/MySQL/MySQL查询优化.md"},o=l('<p>MySQL优化定义：从一定程度上减少MySQL的读写瓶颈，降低系统资源的浪费，并提升系统的性能。</p><h2 id="show-status语句解析" tabindex="-1">SHOW STATUS语句解析 <a class="header-anchor" href="#show-status语句解析" aria-label="Permalink to &quot;SHOW STATUS语句解析&quot;">​</a></h2><p>SHOW STATUS 语句能获取MySQL服务器的一些信息状态，主要是数据库性能性能参数。</p><div class="tip custom-block github-alert"><p class="custom-block-title">格式语法</p><p></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW [SESSION | GLOBAL] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STATUS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;status_name&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><ul><li>SESSION：获取当前会话级别的性能参数</li><li>GLOBAL：获取全局级别的性能参数</li></ul><p>如果省略不写，默认为SESSION。</p><p>SHOW STATUS语句支持的参数：</p><table tabindex="0"><thead><tr><th>参数值</th><th>参数说明</th></tr></thead><tbody><tr><td>Connections</td><td>连接MySQL服务器的次数</td></tr><tr><td>Uptime</td><td>MySQL服务器启动后连接工作的时间</td></tr><tr><td>Slow_queries</td><td>慢查询的次数</td></tr><tr><td>Com_insert</td><td>插入数据的次数，批量插入多条数据时，只累加1</td></tr><tr><td>Com_delete</td><td>删除数据的次数，每次累加1</td></tr><tr><td>Com_update</td><td>修改数据的次数，每次累加1</td></tr><tr><td>Com_select</td><td>查询数据的次数，一次查询操作累加1</td></tr><tr><td>Innodb_rows_read</td><td>查询数据时返回的记录数</td></tr><tr><td>Innodb_rows_inserted</td><td>插入数据时返回的记录数</td></tr><tr><td>Innodb_rows_updated</td><td>更新数据时返回的记录数</td></tr><tr><td>Innodb_rows_deleted</td><td>删除数据时返回的记录数</td></tr></tbody></table><ul><li>Comm_xxx 形式的参数表示SQL语句执行的次数</li><li>Innodb_rows_xxx 形式的参数表示在InnoDB存储引擎下，MySQL执行增删改查操作的次数。</li></ul><h2 id="explain-语句解析" tabindex="-1">EXPLAIN 语句解析 <a class="header-anchor" href="#explain-语句解析" aria-label="Permalink to &quot;EXPLAIN 语句解析&quot;">​</a></h2><p>使用EXPLAIN语句来获取执行查询语句的信息，只需将EXPLAIN语句放在查询语句前即可。</p><div class="tip custom-block github-alert"><p class="custom-block-title">格式语法</p><p></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select_expr;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><ul><li>EXPLAIN：分析查询语句的关键字</li><li>SELECT：执行查询语句的关键字</li><li>select_expr：查询语句的查询选项</li></ul><p>​<span style="color:red;">EXPLAIN</span> 语句输出的各个列的作用如下</p><table tabindex="0"><thead><tr><th style="text-align:left;">列明</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;"><span style="color:red;">id </span></td><td>在一个大的查询语句中每个SELECT关键字都对应一个 唯一的id</td></tr><tr><td style="text-align:left;"><span style="color:red;">select_type </span></td><td>SELECT关键字对应的那个查询的类型</td></tr><tr><td style="text-align:left;"><span style="color:red;">table </span></td><td>表名</td></tr><tr><td style="text-align:left;"><span style="color:red;">partitions </span></td><td>匹配的分区信息</td></tr><tr><td style="text-align:left;"><span style="color:red;">type</span></td><td>针对单表的访问方法</td></tr><tr><td style="text-align:left;"><span style="color:red;">possible_keys </span></td><td>可能用到的索引</td></tr><tr><td style="text-align:left;"><span style="color:red;">key</span></td><td>实际上使用的索引</td></tr><tr><td style="text-align:left;"><span style="color:red;">key_len </span></td><td>实际使用到的索引长度</td></tr><tr><td style="text-align:left;"><span style="color:red;">ref</span></td><td>当使用索引列等值查询时，与索引列进行等值匹配的对象信息</td></tr><tr><td style="text-align:left;"><span style="color:red;">rows</span></td><td>预估的需要读取的记录条数</td></tr><tr><td style="text-align:left;"><span style="color:red;">filtered</span></td><td>某个表经过搜索条件过滤后剩余记录条数的百分比</td></tr><tr><td style="text-align:left;"><span style="color:red;">Extra </span></td><td>一些额外的信息</td></tr></tbody></table><ul><li><p><span style="color:red;">id</span></p><p>表示SELECT语句的序列号，有多少个SELECT语句就有多少个序列号。</p></li><li><p><span style="color:red;">select_type</span></p><p>当前SQL语句的查询类型，select_type常见的取值如下：</p></li><li><p><span style="color:blue;">SIMPLE</span></p><p>当前SQL语句是简单查询，不包含任何连接查询和子查询。</p></li><li><p><span style="color:blue;">PRIMARY</span></p><p>主查询或者是包含子查询时最外层的查询语句。</p></li><li><p><span style="color:blue;">UNION</span></p><p>当前SQL语句为连接查询，表示连接查询的第二个SELECT语句或者是第二个后面的SELECT语句。</p></li><li><p><span style="color:blue;">DEPENDENT UNION</span></p><p>与UNION含有相同，但是DEPENDENT UNION取决于外层的查询语句。</p></li><li><p><span style="color:blue;">UNION RESULT</span></p><p>表示连接查询的结果信息。</p></li><li><p><span style="color:blue;">SUBQUERY</span></p><p>表示子查询中的第一个查询语句。</p></li><li><p><span style="color:blue;">DEPENDENT SUBQUERY</span></p><p>与SUBQUERY 含义相同，DEPENDENT SUBQUERY取决于外层的查询语句。</p></li><li><p><span style="color:blue;">DERIVED</span></p><p>表示FROM子句中的子查询。</p></li><li><p><span style="color:blue;">MATERIALIZED</span></p><p>表示实例化子查询。</p></li><li><p><span style="color:blue;">UNCACHEABLE SUBQUERY</span></p><p>表示不缓存子查询的结果数据，重新计算外部查询的每一行数据。</p></li><li><p><span style="color:blue;">UNCACHEABLE UNION</span></p><p>表示不缓存连接查询的结果数据，每次执行连接查询时都会重新计算数据结果。</p></li><li><p><span style="color:red;">table</span></p><p>当前查询所在的数据表。</p></li><li><p><span style="color:red;">partitions</span></p><p>如果当前数据表是分区表，则表示查询结果匹配的分区。</p></li><li><p><span style="color:red;">type</span></p><p>当前SQL语句所使用的关联类型或者访问类型，其取值从最优到最差依次排序为：system &gt; const &gt;eq_ref &gt;ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt;index &gt; All 。</p></li><li><p><span style="color:blue;">system</span></p><p>查询的数据表中只有一行数据，是const类型的特例。</p></li><li><p><span style="color:blue;">const</span></p><p>表中最多只有一行数据符合查询条件。当查询或连接的字段为<span style="color:red;">主键或唯一索引</span>时，则type的取值为const。</p></li><li><p><span style="color:blue;">eq_ref</span></p><p>查询语句中的连接条件或查询条件使用了<span style="color:red;">主键或者非空唯一索引</span>包含的全部字段。则type的取值为eq_ref。典型场景：<span style="color:green;">使用&quot;=&quot;操作符比较带索引的列。</span></p></li><li><p><span style="color:blue;">ref</span></p><p>查询语句中连接条件或者查询条件使用的<span style="color:red;">索引不是主键和非空唯一约束索引</span>，或者只是一个索引的一部分，则type的取值为ref。典型场景：<span style="color:green;">使用“=” 或者“&lt;=&gt;”操作符比较带有索引的列。</span></p></li><li><p><span style="color:blue;">fulltext</span></p><p>当查询语句中的查询条件使用了<span style="color:red;">全文索引</span>时，type的取值为fulltext。</p></li><li><p><span style="color:blue;">ref_or_null </span></p><p>类似与ref，但是查询语句的连接条件或者查询条件包含的列有NULL值时，MySQL会进行额外查询，经常被用于解析子查询。</p></li><li><p><span style="color:blue;">index_merge</span></p><p>当查询语句使用索引合并优化时，type的取值为index_merge。key会显示使用到的所有索引，key_line显示使用到索引的最长键长值。</p></li><li><p><span style="color:blue;">unique_subquery</span></p><p>查询语句的查询条件为IN的语句，并且IN语句中的查询字段为数据表的<span style="color:red;">主键或者非空唯一索引</span>字段时，type的取值为unique_subquery。</p></li><li><p><span style="color:blue;">index_subquery</span></p><p>与unique_subquery 类似。IN语句中的查询字段为数据表中的<span style="color:red;">非唯一索引字段。</span></p></li><li><p><span style="color:blue;">range</span></p><p>查询语句的查询条件为使用索引检查数据表中的某个范围的记录时，type的取值为range。key会显示使用到的索引，key_line显示使用到索引的最长键长值。</p><p>典型场景：使用 =、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS [NOT] NULL、&lt;=&gt; 、BETWEEN AND 或者IN操作时，用常量比较关键字的列。</p></li><li><p><span style="color:blue;">index</span></p><p>查询语句中的查询条件使用的是覆盖索引，也就是说查询条件中的字段包含索引中的全部字段，并且按照索引中字段的顺序进行条件匹配，此时只需要扫描索引树即可。</p></li><li><p><span style="color:blue;">ALL</span></p><p>每次进行连接查询时，都会进行全表的扫描。这种查询性能最差，一般情况下，需要添加索引来避免此类型的查询。</p></li><li><p><span style="color:red;">possible_keys</span></p><p>MySQL在执行查询语句时可能使用到的索引，但在实际查询中未必会使用到。当此列值为NULL时，说明MySQL没有可使用的索引，此时可以建立索引来提高查询性能。</p></li><li><p><span style="color:red;">key</span></p><p>执行查询语句时MySQL实际会使用到的索引，如果MySQLZ实际没有使用索引，则此列为NULL。</p></li><li><p><span style="color:red;">key_len</span></p><p>执行查询语句时MySQL实际会使用到的索引按照字节计算长度值。如果key为NULL,则key_len的值也为NULL。</p></li><li><p><span style="color:red;">ref</span></p><p>数据表中的哪个列或者哪个常量用来和key列中的索引做比较来检索数据。如果值此列值为func，则说明使用了某些函数的结果数据与key列的索引做比较来检索数据。</p></li><li><p><span style="color:red;">rows</span></p><p>MySQL查询数据时必须查找的数据行数，当数据表的存储引擎为InnoDB时，此值为MySQL的预估值。</p></li><li><p><span style="color:red;">filtered</span></p><p>查询结果符合查询条件的百分比。最小值为0，表示没有匹配条件的记录，最大值为100，表示数据表中所有行全部符合查询条件或者没有对数据进行过滤。</p></li><li><p><span style="color:red;">Extra</span></p><p>MySQL在执行查询语句时额外的详细信息。</p></li></ul><h2 id="show-profile-解析" tabindex="-1">SHOW PROFILE 解析 <a class="header-anchor" href="#show-profile-解析" aria-label="Permalink to &quot;SHOW PROFILE 解析&quot;">​</a></h2><p>MySQL从5.0.37版本开始支持SHOW PROFILES语句 SHOW PROFILE语句。</p><p>可以使用如下命令MySQL是否支持PROFILE。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@have_profiling;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+p+'" alt="Snipaste_2024-06-30_17-11-50.png"></p><p>结果显示，当前MySQL支持PROFILE。</p><p>MySQL中默认profiling是关闭的，如下查看：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@profiling;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+e+'" alt="Snipaste_2024-06-30_17-12-12.png"></p><p>可以通过SET语句开启profiling，例如：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SESSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profiling</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+a+'" alt="Snipaste_2024-06-30_17-12-53.png"></p><p>当@@profiling状态为1，则说明开启了profiling。</p><p>开启之后可以使用<span style="color:red;">SHOW PROFILES</span>语句查看SQL语句信息。例如：</p><p><img src="'+n+'" alt="Snipaste_2024-06-30_17-13-11.png"></p><p>通过如下语句查看某条的SQL语句执行过程中所在线程的具体信息：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PROFILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QUERY N;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>N为执行SHOW PROFILES中的Query_ID。</p><p><img src="'+r+`" alt="Snipaste_2024-06-30_17-13-36.png"></p><h2 id="关联查询优化" tabindex="-1">关联查询优化 <a class="header-anchor" href="#关联查询优化" aria-label="Permalink to &quot;关联查询优化&quot;">​</a></h2><ol><li><p>保证被驱动表的JOIN字段已经创建了索引</p></li><li><p>需要JOIN 的字段，数据类型保持绝对一致。</p></li><li><p>LEFT JOIN 时，选择小表作为驱动表， 大表作为被驱动表 。减少外层循环的次数。</p></li><li><p>INNER JOIN 时，MySQL会自动将 小结果集的表选为驱动表 。选择相信MySQL优化策略。</p></li><li><p>能够直接多表关联的尽量直接关联，不用子查询。(减少查询的趟数) 。</p></li><li><p>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用 JOIN 来代替子查询。</p></li><li><p>衍生表建不了索引。</p></li></ol><h2 id="子查询优化" tabindex="-1">子查询优化 <a class="header-anchor" href="#子查询优化" aria-label="Permalink to &quot;子查询优化&quot;">​</a></h2><p>MySQL从4.1版本开始支持子查询，使用子查询可以进行SELECT语句的嵌套查询，即一个SELECT查询的结果作为另一个SELECT语句的条件。</p><p><span style="color:red;">子查询可以一次性完成很多逻辑上需要多个步骤才能完成的SQL操作</span> 。</p><p>子查询是 MySQL 的一项重要的功能，可以帮助我们通过一个 SQL 语句实现比较复杂的查询。</p><p>但是，子查询的执行效率不高。原因：</p><ol><li><p>执行子查询时，MySQL需要为内层查询语句的查询结果 <span style="color:red;">建立一个临时表</span> ，然后外层查询语句从临时表 中查询记录。查询完毕后，再 <span style="color:red;">撤销这些临时表</span> 。这样会消耗过多的CPU和IO资源，产生大量的慢查询。</p></li><li><p>子查询的结果集存储的临时表，不论是内存临时表还是磁盘临时表都<span style="color:red;"> 不会存在索引 </span>，所以查询性能会 受到一定的影响。</p></li><li><p>对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p></li></ol><p><span style="color:red;">在MySQL中，可以使用连接（JOIN）查询来替代子查询</span>。连接查询不需要建立临时表 ，其速度比子查询要快 ，如果查询中使用索引的话，性能就会更好。</p><div class="tip custom-block github-alert"><p class="custom-block-title">结论</p><p>尽量不要使用NOT IN 或者 NOT EXISTS，用LEFT JOIN xxx ON xx WHERE xx IS NULL替代</p></div><h2 id="排序优化" tabindex="-1">排序优化 <a class="header-anchor" href="#排序优化" aria-label="Permalink to &quot;排序优化&quot;">​</a></h2><p>问题：在 WHERE 条件字段上加索引，但是为什么在 ORDER BY 字段上还要加索引呢？</p><p>优化建议：</p><ol><li><p>SQL 中，可以在 WHERE 子句和 ORDER BY 子句中使用索引，<span style="color:red;">目的是在 WHERE 子句中 避免全表扫描 </span>，在 ORDER BY 子句<span style="color:red;"> 避免使用 FileSort 排序 </span>。当然，某些情况下全表扫描，或者 FileSort 排 序不一定比索引慢。但总的来说，我们还是要避免，以提高查询效率。</p></li><li><p>尽量使用 Index 完成 ORDER BY 排序。如果 WHERE 和 ORDER BY 后面是相同的列就使用单索引列； 如果不同就使用联合索引。</p></li><li><p>无法使用 Index 时，需要对 FileSort 方式进行调优。</p></li></ol><h2 id="group-by优化" tabindex="-1">GROUP BY优化 <a class="header-anchor" href="#group-by优化" aria-label="Permalink to &quot;GROUP BY优化&quot;">​</a></h2><ol><li><p>group by 使用索引的原则几乎跟order by一致 ，group by 即使没有过滤条件用到索引，也可以直接 使用索引。</p></li><li><p>group by 先排序再分组，遵照索引建的最佳左前缀法则</p></li><li><p>当无法使用索引列，增大 <span style="color:red;">max_length_for_sort_data</span> 和<span style="color:red;"> sort_buffer_size</span> 参数的设置</p></li><li><p>where效率高于having，能写在where限定的条件就不要写在having中了</p></li><li><p>减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。Order by、group by、distinct这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</p></li><li><p>包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行 以内，否则SQL会很慢。</p></li></ol><h2 id="优化分页查询" tabindex="-1">优化分页查询 <a class="header-anchor" href="#优化分页查询" aria-label="Permalink to &quot;优化分页查询&quot;">​</a></h2><ol><li>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</li></ol><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student t,(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</li></ol><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,56),h=[o];function c(y,k,E,g,u,b){return t(),i("div",null,h)}const L=s(d,[["render",c]]);export{_ as __pageData,L as default};
