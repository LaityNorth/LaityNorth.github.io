import{_ as p,D as h,c as k,j as l,a as s,I as n,a1 as i,o as e}from"./chunks/framework.DFHaK-wS.js";const t="/assets/Snipaste_2024-06-29_13-20-11.C2LL7qjx.png",r="/assets/Snipaste_2024-06-29_13-33-38.BK-2ycuW.png",R=JSON.parse('{"title":"Redis分布式锁案例","description":"","frontmatter":{"title":"Redis分布式锁案例"},"headers":[],"relativePath":"分布式锁/基于Redis的方式分布式锁.md","filePath":"分布式锁/基于Redis的方式分布式锁.md"}'),E={name:"分布式锁/基于Redis的方式分布式锁.md"},d=i("",3),g=i("",5),y=i("",4),F=l("code",null,"java setIfAbsent === redis-cli setnx",-1),c=i("",20);function b(u,m,A,o,D,C){const a=h("Badge");return e(),k("div",null,[d,l("p",null,[s("分布式锁处理可以采用基于数据库级别的：“乐观锁” 和“悲观锁”实现之外，还可以采用业界比较流行的的方式比如："),n(a,{type:"tip",text:"Redis的原子操作实现分布式锁，以及Zookeeper的临时节点和Watcher机制实现分布式锁。"})]),g,n(a,{type:"tip",text:"幂等性：就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用"}),y,l("p",null,[s("从该操作命令不难看出，"),n(a,{type:"danger",text:"NX机制其实就是用于实现分布式锁的核心"}),s("，即所谓的SETNX操作，但是在使用setnx实现分布式锁需要注意以下几点："),F,s(" 获取锁1 ,获取不到就是0")]),c])}const T=p(E,[["render",b]]);export{R as __pageData,T as default};
