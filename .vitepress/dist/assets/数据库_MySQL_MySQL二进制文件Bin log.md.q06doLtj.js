import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.DFHaK-wS.js";const l="/assets/Snipaste_2024-06-30_18-05-27.DD5xsc00.png",p="/assets/Snipaste_2024-06-30_18-13-49.ieYqfnst.png",e="/assets/Snipaste_2024-06-30_18-14-11.CyTeBA8M.png",t="/assets/Snipaste_2024-06-30_18-15-47.BNX8Fv6j.png",h="/assets/Snipaste_2024-06-30_18-16-43.CSOilTqg.png",r="/assets/Snipaste_2024-06-30_18-17-12.CjTruKQP.png",k="/assets/Snipaste_2024-06-30_18-17-30.gV3K9UMg.png",o="/assets/Snipaste_2024-06-30_18-17-49.BaUoXwuA.png",d="/assets/Snipaste_2024-06-30_18-18-18.BAFpi2Du.png",q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"数据库/MySQL/MySQL二进制文件Bin log.md","filePath":"数据库/MySQL/MySQL二进制文件Bin log.md"}'),g={name:"数据库/MySQL/MySQL二进制文件Bin log.md"},c=n('<h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>binlog可以说是MySQL中比较 重要的日志了，在日常开发及运维过程中，经常会遇到。 binlog即binary log，二进制日志文件，也叫作变更日志（update log）。它记录了数据库所有执行的 DDL和 DML等数据库更新事件的语句，但是不包含没有修改任何数据的语句（如数据查询语句select、 show等）。</p><p>它以<span style="color:#0080c0;">事件形式</span>记录并保存在<span style="color:#0080c0;">二进制文件</span>中。通过这些信息，我们可以再现数据更新操作的全过程。</p><blockquote><p>如果想要记录所有语句（例如：为了识别有问题的查询），需要使用通用查询日志。</p></blockquote><p>binlog主要应用场景：</p><ul><li><p>一是用于<span style="color:#0080c0;"> 数据恢复</span>，如果MySQL数据库意外停止，可以通过二进制文件来查看用户执行了那些操作，对数据库服务器文件做了哪些修改，然后根据二进制文件中的记录来恢复数据库服务器。</p></li><li><p>二是用于<span style="color:#0080c0;"> 数据复制</span>，由于日志的延续性和时效性，master把它的二进制日志传递给slaves来达到master-&gt;slave数据一致的目的。</p></li></ul><p><img src="'+l+`" alt="Snipaste_2024-06-30_18-05-27.png"></p><p>可以说MySQL数据的<span style="color:#0080c0;">数据备份、主备、主主、主从</span>都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。</p><h2 id="日志参数设置" tabindex="-1">日志参数设置 <a class="header-anchor" href="#日志参数设置" aria-label="Permalink to &quot;日志参数设置&quot;">​</a></h2><p>查看记录二进制日志是否开启：在MySQL8中默认情况下，二进制文件是开启的。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%log_bin%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="永久性方式" tabindex="-1">永久性方式 <a class="header-anchor" href="#永久性方式" aria-label="Permalink to &quot;永久性方式&quot;">​</a></h3><p>修改MySQL的my.cnf或my.ini文件可以设置二进制日志的相关参数</p><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#启用二进制日志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">log-bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=atguigu-bin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">binlog_expire_logs_seconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=600</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">max_binlog_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=100M</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block github-alert"><p class="custom-block-title">提示</p><p></p><ol><li><p>log-bin=mysql-bin #打开日志(主机需要打开)，这个mysql-bin也可以自定义，这里也可以加上路径， 如：/home/www/mysql_bin_log/mysql-bin</p></li><li><p>binlog_expire_logs_seconds:此参数控制二进制日志文件保留的时长，单位是秒，默认2592000 30天， 14400 4小时 ，86400 1天，259200 3天。</p></li><li><p>max_binlog_size：控制单个二进制日志大小，当前日志文件大小超过此变量时，执行切换动作。此参数的最大值和默认值是1GB，该设置并不能严格控制Binlog的大小，尤其是Binlog比较靠近最大值而又遇到一个比较大事务时，为了保证事务的完整性，可能不做切换日志的动作，只能将该事务的所有SQL都记录进当前日志，直到事务结束。一般情况可采取默认值。</p></li></ol></div><p>重新启动MySQL服务，查询二进制日志的信息，执行结果</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%log_bin%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------------------------+----------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Variable_name | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------------------------+----------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| log_bin | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| log_bin_basename | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">atguigu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bin |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| log_bin_index | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">atguigu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| log_bin_trust_function_creators | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| log_bin_use_v1_row_events | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| sql_log_bin | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------------------------+----------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>设置带文件夹的bin-log日志存放目录</p><p>如果想改变日志文件的目录和名称，可以对my.cnf或my.ini中的log_bin参数修改如下</p><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">log-bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/var/lib/mysql/binlog/atguigu-bin&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="tip custom-block github-alert"><p class="custom-block-title">注意</p><p>新建的文件夹需要使用mysql用户，使用下面的命令即可。</p></div><h3 id="临时性方式" tabindex="-1">临时性方式 <a class="header-anchor" href="#临时性方式" aria-label="Permalink to &quot;临时性方式&quot;">​</a></h3><p>如果不希望通过修改配置文件并重启的方式设置二进制日志的话，还可以使用如下指令，需要注意的是在mysql8中只有会话级别的设置，没有了global级别的设置。</p><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># global 级别</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql&gt; set global </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sql_log_bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR 1228 (HY000): Variable </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sql_log_bin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is a SESSION variable and can\`t be used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">with SET GLOBAL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># session级别</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql&gt; SET </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sql_log_bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Query OK, 0 rows affected (0.01 秒)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="查看日志" tabindex="-1">查看日志 <a class="header-anchor" href="#查看日志" aria-label="Permalink to &quot;查看日志&quot;">​</a></h2><p>当MySQL创建二进制日志文件时，先创建一个以“filename”为名称、以“.index”为后缀的文件，再创建一个以“filename”为名称、以“.000001”为后缀的文件。</p><p>MySQL服务<span style="color:#0080c0;">重新启动一次</span>，以“.000001”为后缀的文件就会增加一个，并且后缀名按1递增。</p><p>即日志文件的个数与MySQL服务启动的次数相同；如果日志长度超过了<span style="color:#0080c0;"> max_binlog_size</span> 的上限（默认是1GB），就会创建一个新的日志文件。 查看当前的二进制日志文件列表及大小。指令如下：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BINARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LOGS;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>下面命令将行事件以 <span style="color:#0080c0;">伪SQL的形式</span>表现出来</p><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqlbinlog -v </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;binlog存在的完整路径&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面这种办法读取出binlog日志的全文内容比较多，不容易分辨查看到pos点信息，下面介绍一种更为方 便的查询命令：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show binlog events [IN &#39;log_name&#39;] [FROM pos] [LIMIT [offset,] row_count];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><span style="color:#0080c0;">IN &#39;log_name&#39; ：</span>指定要查询的binlog文件名（不指定就是第一个binlog文件）</p></li><li><p><span style="color:#0080c0;">FROM pos ：</span>指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）</p></li><li><p><span style="color:#0080c0;">LIMIT [offset] ：</span>偏移量(不指定就是0)</p></li><li><p><span style="color:#0080c0;">row_count :</span>查询总条数（不指定就是所有行）</p></li></ul><h2 id="使用日志恢复数据" tabindex="-1">使用日志恢复数据 <a class="header-anchor" href="#使用日志恢复数据" aria-label="Permalink to &quot;使用日志恢复数据&quot;">​</a></h2><p>MySQL binlog恢复数据的语法如下</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqlbinlog [option] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|mysql –uuser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ppass;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令可以这样理解：使用mysqlbinlog命令来读取filename中的内容，然后使用mysql命令将这些内容 恢复到数据库中。</p><ul><li><p>filename</p><p>日志文件名。</p></li><li><p>option</p><p>可选项，比较重要的两对option参数是--start-date、--stop-date 和 --start-position、-- stop-position。</p><p>--start-date 和 --stop-date：可以指定恢复数据库的起始时间点和结束时间点。</p><p>--start-position和--stop-position：可以指定恢复数据的开始位置和结束位置。</p><div class="tip custom-block github-alert"><p class="custom-block-title">注意</p><p>使用mysqlbinlog命令进行恢复操作时，必须是编号小的先恢复，例如atguigu-bin.000001必 须在atguigu-bin.000002之前恢复。</p></div></li></ul><h2 id="删除二进制日志" tabindex="-1">删除二进制日志 <a class="header-anchor" href="#删除二进制日志" aria-label="Permalink to &quot;删除二进制日志&quot;">​</a></h2><p>MySQL的二进制文件可以配置自动删除，同时MySQL也提供了安全的手动删除二进制文件的方法。</p><p><span style="color:#0080c0;">PURGE MASTER LOGS </span>只删除指定部分的二进制日志文件，</p><p><span style="color:#0080c0;">RESET MASTER </span>删除所有的二进制日志文 件。具体如下：</p><p>PURGE MASTER LOGS：删除指定日志文件</p><div class="tip custom-block github-alert"><p class="custom-block-title">语法</p><p></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PURGE {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MASTER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BINARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} LOGS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘指定日志文件名’</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PURGE {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MASTER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BINARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} LOGS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEFORE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘指定日期’</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><h2 id="写入机制" tabindex="-1">写入机制 <a class="header-anchor" href="#写入机制" aria-label="Permalink to &quot;写入机制&quot;">​</a></h2><p>binlog的写入时机也非常简单，事务执行过程中，先把日志写到<span style="color:#0080c0;"> binlog cache</span>，事务提交的时候，再把binlog cache写到binlog文件中。</p><p>因为一个事务的binlog不能被拆开，无论这个事务多大，也要确保一 次性写入，所以系统会给每个线程分配一个块内存作为binlog cache。</p><p><img src="`+p+'" alt="Snipaste_2024-06-30_18-13-49.png"></p><p>write和fsync的时机，可以由参数<span style="color:#0080c0;"> sync_binlog</span> 控制，默认是 0 。</p><p>为0的时候，表示每次提交事务都只write，由系统自行判断什么时候执行fsync。</p><p>虽然性能得到提升，但是机器宕机，page cache里面的 binglog 会丢失。</p><p>如下图：<img src="'+e+'" alt="Snipaste_2024-06-30_18-14-11.png"></p><p>为了安全起见，可以设置为1 ，表示每次提交事务都会执行fsync，就如同<span style="color:#0080c0;">redo log 刷盘流程一样</span>。</p><p>最后还有一种折中方式，可以设置为N(N&gt;1)，表示每次提交事务都write，但累积N个事务后才fsync。</p><p><img src="'+t+'" alt="Snipaste_2024-06-30_18-15-47.png"></p><p>在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。同样的，如果机器宕 机，会丢失最近N个事务的binlog日志。</p><h2 id="两阶段提交" tabindex="-1">两阶段提交 <a class="header-anchor" href="#两阶段提交" aria-label="Permalink to &quot;两阶段提交&quot;">​</a></h2><p>在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程 中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的 写入时机 不一样。</p><p><img src="'+h+'" alt="Snipaste_2024-06-30_18-16-43.png"></p><blockquote><p>redo log与binlog两份日志之间的逻辑不一致，会出现什么问题？</p></blockquote><p><img src="'+r+'" alt="Snipaste_2024-06-30_18-17-12.png"></p><p>由于binlog没写完就异常，这时候binlog里面没有对应的修改记录</p><p><img src="'+k+'" alt="Snipaste_2024-06-30_18-17-30.png"></p><p>为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用<span style="color:#0080c0;">两阶段提交方案。</span></p><p><img src="'+o+'" alt="Snipaste_2024-06-30_18-17-49.png"></p><p>另一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？</p><p><img src="'+d+'" alt="Snipaste_2024-06-30_18-18-18.png"></p><p>并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对 应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。</p>',69),E=[c];function b(y,u,m,_,v,F){return a(),i("div",null,E)}const D=s(g,[["render",b]]);export{q as __pageData,D as default};
