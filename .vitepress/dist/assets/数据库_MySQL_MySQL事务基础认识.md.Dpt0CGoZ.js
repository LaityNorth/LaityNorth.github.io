import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.DFHaK-wS.js";const p="/assets/Snipaste_2024-06-30_16-53-21.DXpbC6iG.png",l="/assets/Snipaste_2024-06-30_16-53-52.DplBCeFg.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"数据库/MySQL/MySQL事务基础认识.md","filePath":"数据库/MySQL/MySQL事务基础认识.md"}'),e={name:"数据库/MySQL/MySQL事务基础认识.md"},t=n('<h2 id="事务的基本概念" tabindex="-1">事务的基本概念 <a class="header-anchor" href="#事务的基本概念" aria-label="Permalink to &quot;事务的基本概念&quot;">​</a></h2><p><span style="color:red;">事务：</span>一组逻辑操作单元，使数据从一种状态变换到另一种状态。</p><p><span style="color:red;">事务处理的原则：</span>保证所有事务都作为 一个工作单元 来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交( commit )，那么这些修改就永久地保 存下来；要么数据库管理系统将 放弃 所作的所有 修改 ，整个事务回滚( rollback )到最初状态。</p><h2 id="事务的acid特性" tabindex="-1">事务的ACID特性 <a class="header-anchor" href="#事务的acid特性" aria-label="Permalink to &quot;事务的ACID特性&quot;">​</a></h2><ul><li><p><span style="color:red;">原子性（atomicity）</span></p><p>原子性是指事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚。</p></li><li><p><span style="color:red;">一致性（consistency）</span></p><p>根据定义，一致性是指事务执行前后，数据从一个 合法性状态 变换到另外一个 合法性状态 。这种状态 是语义上 的而不是语法上的，跟具体的业务有关。 那什么是合法的数据状态呢？满足 预定的约束 的状态就叫做合法的状态。通俗一点，这状态是由你自己 来定义的（比如满足现实世界中的约束）。满足这个状态，数据就是一致的，不满足这个状态，数据就 是不一致的！如果事务中的某个操作失败了，系统就会自动撤销当前正在执行的事务，返回到事务操作 之前的状态。</p></li><li><p><span style="color:red;">隔离型（isolation）</span></p><p>事务的隔离性是指一个事务的执行 不能被其他事务干扰 ，即一个事务内部的操作及使用的数据对 并发 的 其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><span style="color:red;">持久性（durability）</span></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是 永久性的 ，接下来的其他操作和数据库 故障不应该对其有任何影响。 持久性是通过 事务日志 来保证的。日志包括了 重做日志 和 回滚日志 。当我们通过事务对数据进行修改 的时候，首先会将数据库的变化信息记录到重做日志中，然后再对数据库中对应的行进行修改。这样做 的好处是，即使数据库系统崩溃，数据库重启后也能找到没有更新到数据库系统中的重做日志，重新执 行，从而使事务具有持久性。</p></li></ul><h2 id="事务隔离级别" tabindex="-1">事务隔离级别 <a class="header-anchor" href="#事务隔离级别" aria-label="Permalink to &quot;事务隔离级别&quot;">​</a></h2><h3 id="数据并发问题" tabindex="-1">数据并发问题 <a class="header-anchor" href="#数据并发问题" aria-label="Permalink to &quot;数据并发问题&quot;">​</a></h3><p>针对事务的隔离性和并发性，我们怎么做取舍呢？先看一下访问相同数据的事务在 不保证串行执行（也 就是执行完一个再执行另一个）的情况下可能会出现哪些问题</p><ul><li><p><span style="color:red;">脏写（ Dirty Write ）</span></p><p>对于两个事务或两个以上的事务，例如：有事务A，事务B，两个事务。事务A修改了事务B修改过且没有提交的数据，这就称为脏写。</p></li><li><p><span style="color:red;">脏读（Dirty Read）</span></p><p>对于两个事务或及两个以上的事务，例如：有事务A，事务B，两个事务。如果事务A修改了表中的某些数据，但是事务A还没有提交（commit）,此时事务B对事务A操作的表进行了查询，获取到事务A操作过并没有commit的数据。这种操作成为脏读。</p></li><li><p><span style="color:red;">不可重复读（ Non-Repeatable Read ）</span></p><p>对于两个事务或及两个以上的事务，例如：有事务A，事务B，两个事务。事务A读取了数据库中表的某条数据,而事务B对事务A读取的那条数据进行了<span style="color:red;">更新、修改</span>操作，当事务A再次对同一条数据进行读取时得到的结果与第一次读取的结果不相同，这就称为不可重复读。</p></li><li><p><span style="color:red;">幻读（ Phantom ）</span></p><p>对于两个事务或及两个以上的事务，例如：有事务A，事务B，两个事务。事务A读取数据库中某表的数据，然后事务B往事务A操作的表<span style="color:red;">插入</span>了某些数据，当事务A再次读取表时会发现多了几条数据。这就称为幻读。（多出来的数据就是事务B插入的数据）。</p></li></ul><h3 id="sql中的四种隔离级别" tabindex="-1">SQL中的四种隔离级别 <a class="header-anchor" href="#sql中的四种隔离级别" aria-label="Permalink to &quot;SQL中的四种隔离级别&quot;">​</a></h3><p>上面介绍了几种并发事务执行过程中可能遇到的一些问题，这些问题有轻重缓急之分，我们给这些问题 按照严重性来排一下序</p><div class="language-properties vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">脏写&gt;脏读&gt;不可重复读&gt;幻读</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们愿意舍弃一部分隔离性来换取一部分性能在这里就体现在：设立一些隔离级别，隔离级别越低，并 发问题发生的就越多。</p><p>SQL标准中设立了4个隔离级别：</p><ul><li><p><span style="color:red;">READ UNCOMMITTED</span></p><p>读未提交，在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。不能避免脏读、不可重复读、幻读。</p></li><li><p><span style="color:red;">READ COMMITTED</span></p><p>读已提交，它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。可以避免脏读，但不可重复读、幻读问题仍然存在。</p></li><li><p><span style="color:red;">REPEATABLE READ</span></p><p>可重复读，事务A在读到一条数据之后，此时事务B对该数据进行了修改并提交，那么事务A再读该数据，读到的还是原来的内容。可以避免脏读、不可重复读，但幻读问题仍然存在。这是MySQL的默认隔离级别。</p></li><li><p><span style="color:red;">SERIALIZABLE ：</span></p><p>可串行化，确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作。所有的并发问题都可以避免，但性能十分低下。能避免脏读、不可重复读和幻读。</p></li></ul><p>SQL标准中规定，针对不同的隔离级别，并发事务可以发生不同严重程度的问题，具体情况如下：</p><p><img src="'+p+'" alt="Snipaste_2024-06-30_16-53-21.png"></p><p><span style="color:red;">脏写</span> 怎么没涉及到？因为脏写这个问题太严重了，不论是哪种隔离级别，都不允许脏写的情况发生。 不同的隔离级别有不同的现象，并有不同的锁和并发机制，隔离级别越高，数据库的并发性能就越差</p><p>4种事务隔离级别与并发性能的关系如下：</p><p><img src="'+l+`" alt="Snipaste_2024-06-30_16-53-52.png"></p><h3 id="mysql支持的4种事务隔离级别" tabindex="-1">MySQL支持的4种事务隔离级别 <a class="header-anchor" href="#mysql支持的4种事务隔离级别" aria-label="Permalink to &quot;MySQL支持的4种事务隔离级别&quot;">​</a></h3><p>在MySQL数据库中，都支持SQL标准中的事务隔离级别。默认为<span style="color:red;">REPEATABLE READ</span>级别。</p><p>通过下面的语句修改事务的隔离级别：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [GLOBAL|SESSION] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ISOLATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LEVEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 隔离级别;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 其中，隔离级别格式：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UNCOMMITTED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> COMMITTED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REPEATABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> READ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SERIALIZABLE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>或者</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [GLOBAL|SESSION] TRANSACTION_ISOLATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;隔离级别&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 其中，隔离级别格式：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">READ-UNCOMMITTED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">READ-COMMITTED</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REPEATABLE-READ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SERIALIZABLE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>GLOBAL 全局范围影响</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GLOBAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ISOLATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LEVEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SERIALIZABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GLOBAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TRANSACTION_ISOLATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SERIALIZABLE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block github-alert"><p class="custom-block-title">贴士</p><p>只对当前已经存在的会话无效</p><p>只对执行完该语句之后产生的会话起作用</p></div><ul><li>SESSION 会话范围影响</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SESSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TRANSACTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ISOLATION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LEVEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SERIALIZABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SESSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TRANSACTION_ISOLATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SERIALIZABLE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block github-alert"><p class="custom-block-title">贴士</p><p>对当前会话的所有后续的事务有效</p><p>如果在事务之间执行，则对后续的事务有效</p><p>该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务</p></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性 就越好，但并发性越弱。</p>`,34),h=[t];function r(k,d,c,E,o,A){return a(),i("div",null,h)}const b=s(e,[["render",r]]);export{g as __pageData,b as default};
