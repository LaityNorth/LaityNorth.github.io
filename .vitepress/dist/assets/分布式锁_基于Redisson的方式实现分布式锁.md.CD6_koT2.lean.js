import{_ as n,D as l,c as p,j as e,a as s,I as k,a1 as i,o as h}from"./chunks/framework.DFHaK-wS.js";const D=JSON.parse('{"title":"Redisson分布式锁案例","description":"","frontmatter":{"title":"Redisson分布式锁案例"},"headers":[],"relativePath":"分布式锁/基于Redisson的方式实现分布式锁.md","filePath":"分布式锁/基于Redisson的方式实现分布式锁.md"}'),t={name:"分布式锁/基于Redisson的方式实现分布式锁.md"},r=i("",19),E=i("",20);function d(g,c,y,o,b,u){const a=l("Badge");return h(),p("div",null,[r,e("p",null,[s("在前面的代码中我们很容易发现，自己定义的redis分布式锁，如果出现了redis节点宕机等情况，而该锁又正好处于被锁住的状态，那么这个锁很有可能或进入到死锁状态，为了避免这个状况的发生，redisson内部提供了一个监控锁的："),k(a,{type:"danger",text:"time dog"}),s(" 看门狗，其作用是在redisson实例被关闭之前，不断地延长分布式锁的有效期，在默认情况下，看门狗检查锁的超时时间是30s，当然在实际业务场景中我们可以通过Config.lockWatchDogTimout进行设置。")]),E])}const m=n(t,[["render",d]]);export{D as __pageData,m as default};
